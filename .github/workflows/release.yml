name: release

on:
  push:
    tags:
      - 'v*'
      - '2.*'

permissions:
  contents: write

jobs:
  build:
    name: build-${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          set -euo pipefail
          outdir=dist
          mkdir -p "$outdir"
          binname=ip2asn
          [[ "$GOOS" == "windows" ]] && binname=ip2asn.exe || true
          CGO_ENABLED=0 go build -trimpath -ldflags "-s -w" -o "$outdir/$binname" ./cmd/ip2asn
          pkgname="ip2asn_${GOOS}_${GOARCH}"
          if [[ "$GOOS" == "windows" ]]; then
            (cd "$outdir" && zip -q "${pkgname}.zip" "$binname")
          else
            (cd "$outdir" && tar -czf "${pkgname}.tar.gz" "$binname")
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/*.zip
            dist/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*.zip
            dist/**/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
